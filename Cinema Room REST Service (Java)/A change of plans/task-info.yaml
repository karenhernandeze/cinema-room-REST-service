type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |+
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }



  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/model/Cinema.java
  visible: true
  text: |+
    package cinema.model;
    import cinema.model.Seat;
    import java.util.List;

    public class Cinema {

        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats;

        public Cinema(int row, int column, List<Seat> seats) {
            this.total_rows = row;
            this.total_columns = column;
            this.available_seats = seats;
        }

        public int gettotal_rows() {
            return total_rows;
        }

        public void settotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int gettotal_columns() {
            return total_columns;
        }

        public void settotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getavailable_seats() {
            return available_seats;
        }

        public void setavailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }

    }

  learner_created: true
- name: src/cinema/model/Seat.java
  visible: true
  text: |+
    package cinema.model;

    public class Seat {
        private int row;
        private int column;

        private int price;

        public Seat() {
            // Default constructor
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @Override
        public String toString() {
    //        return "{\"row\":\"" + row + "\",\"column\":" + column + "\",\" price\":" + price + "}";
            return String.format("{\"row\":\"%d\",\"column\":\"%d\",\"price\":%d}", row, column, price);

        }
    }

  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |+
    package cinema.controller;

    import cinema.model.Cinema;
    import cinema.model.Seat;
    import cinema.service.CinemaService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;
    import java.util.Map;

    @RestController
    public class CinemaController {
        int rows = 9;
        int columns = 9;

        private final CinemaService cinemaService;

        @Autowired
        public CinemaController(CinemaService cinemaService) {
            this.cinemaService = cinemaService;
        }


        @GetMapping("/seats")
        public Cinema getSeatInformation() {
            return cinemaService.returnCinema();
        }


        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseTicket(@RequestBody Seat seat) {
            int row = seat.getRow();
            int column = seat.getColumn();

            // Check if the seat is within the bounds of the cinema
            if (row < 1 || row > 9 || column < 1 || column > 9) {
    //            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
    //                    .body("{\"error\": \"The number of a row or a column is out of bounds!\"}");
                return new ResponseEntity<>(Map.of("error", "The number of a row or a column is out of bounds!"), HttpStatus.BAD_REQUEST);
            }

            // Check if the seat is already purchased
            if (!cinemaService.isSeatAvailable(row, column)) {
                return new ResponseEntity<>(Map.of("error", "The ticket has been already purchased!"), HttpStatus.BAD_REQUEST);
    //            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
    //                    .body("{\"error\": \"The ticket has been already purchased!\"}");
            }

            // Mark the seat as purchased
            Seat seatInfo = cinemaService.purchaseSeat(row, column);
            return new ResponseEntity<>( seatInfo, HttpStatus.OK);

        }

    }

  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;
    import cinema.model.Cinema;
    import cinema.model.Seat;
    import cinema.repository.CinemaRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    @Service
    public class CinemaService {

        private final CinemaRepository cinemaRepository;

        @Autowired
        public CinemaService(CinemaRepository seatRepository) {
            this.cinemaRepository = seatRepository;
        }

        public Cinema returnCinema() {
            return new Cinema(cinemaRepository.getTotalRows(), cinemaRepository.getTotalColumns(), cinemaRepository.getAllSeats());

        }

        private boolean[][] seatAvailability = new boolean[9][9];

        public boolean isSeatAvailable(int row, int column) {
            System.out.println(seatAvailability[row-1][column-1]);
            return !seatAvailability[row-1][column-1];
        }
        public Seat purchaseSeat(int row, int column) {
            seatAvailability[row - 1][column - 1] = true;
            return cinemaRepository
                    .getAllSeats().get(row*column-1);
        }

    }
  learner_created: true
- name: src/cinema/repository/CinemaRepository.java
  visible: true
  text: |-
    package cinema.repository;
    import cinema.model.Seat;
    import org.springframework.stereotype.Repository;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    @Repository
    public class CinemaRepository {
        private static final int rows = 9;
        private static final int cols = 9;
        private static final Map<String, Seat> seats_purchased;
        private static final List<Seat> total_seats;

        static {
            seats_purchased = new HashMap<>();
            total_seats = new ArrayList<>();
            for (int row = 1; row <= rows; row++) {
                for (int column = 1; column <= cols; column++) {
                    total_seats.add(new Seat(
                                    row, column,
                                    row <= 4 ? 10 : 8
                            )
                    );
                }
            }
        }

        public int getTotalRows() {
            return rows;
        }

        public int getTotalColumns() {
            return cols;
        }

        public List<Seat> getAllSeats() {
            return total_seats;
        }

        public Seat getSeat(String token) {
            return seats_purchased.get(token);
        }

        public Map<String, Object> saveTicket(String token, Seat seat) {
            seats_purchased.put(token, seat);
            return Map.of("token", token, "ticket", seat);
        }
    }
  learner_created: true
- name: src/cinema/model/Token.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/InvalidTokenException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 27 Jun 2023 01:37:17 UTC"
record: 3
